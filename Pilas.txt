#include <iostream>
using namespace std;
class Pila{
    int indice;
public:
    Pila()
    {
    indice = 0;
    }

    void setIndice(int valor)
    {
        indice = valor;
    }
    int getIndice()
    {
        return indice;
    }
};
class Nodo {
    //Atributos
    Pila dato; //char, float, string, objeto
    Nodo* enlace;//puntero..
public:
    //Constructor - inicializar los atributos
    Nodo(Pila dato)
    {
        this->dato = dato;
        enlace = NULL;//por que no apuntamos a ningun nodo
    }
    //getter and setter
    Pila getDato()
    {
        return dato;
    }
    void setDato(Pila dato)
    {
        this->dato = dato;
    }
    Nodo* getEnlace()
    {
        return this->enlace;
    }
    void setEnlace(Nodo* enlace)
    {
        this->enlace = enlace;
    }
    void imprimir()
    {
        cout << "/-------------------\\" << endl;
        cout << "|Dato: " << dato.getIndice() << endl;
        cout << "|-------------------" << endl;
        cout << "|Enlace: " << enlace << endl;
        cout << "\\------------------/" << endl;
    }
};

class Lista {
    Nodo* inicio;
public:
    Lista()
    {
        this->inicio = NULL;
    }
    void InsertarAlFinal(Pila dato)
    {
        Nodo* temp = new Nodo(dato);
        if (EstaVacia())//lista vacia
        {
            inicio = temp;
        }
        else
        {
            Nodo* recorrido = this->inicio;
            while (recorrido->getEnlace() != NULL)
            {
                recorrido = recorrido->getEnlace();
            }
            recorrido->setEnlace(temp);
        }
    }
    void InsertarAlInicio(Pila dato)
    {
        Nodo* temp = new Nodo(dato);
        if (EstaVacia())//lista vacia
        {
            inicio = temp;
        }
        else
        {
            Nodo* recorrido = this->inicio;
            this->inicio = temp;
            this->inicio->setEnlace(recorrido);
        }
    }
    void Imprimir()
    {
        int i = 1;
        Nodo* recorrido = inicio;
        cout << "Lista enlazada****************************" << endl;
        while (recorrido != NULL)
        {
            cout << "---> Nodo " << i++ << endl;
            recorrido->imprimir();
            recorrido = recorrido->getEnlace();
        }
        cout << "****************************" << endl << endl;
    }
    void Buscar(int indice)
    {
        bool encontrado = false;
        Nodo* recorrido = inicio;
        while (recorrido != NULL)
        {
            if (recorrido->getDato().getIndice() == indice)
            {
                cout << "Elemento encontrado en la dirección de memoría: " << recorrido << endl;
                encontrado = true;
                break;
            }
            else
            {
                recorrido = recorrido->getEnlace();
            }
        }
        if (encontrado == false)
        {
            cout << "El elemento buscado no fue encontrado." << endl;
        }
    }
    //------------------------------------
    //Implementar la eliminación de un nodo final
    void EliminarElementoFinal()
    {
        if (EstaVacia())
        {
            cout << "No hay elemento a eliminar" << endl;
        }
        else
        {
            if (inicio->getEnlace() == NULL)
            {
                inicio = NULL;
            }
            else
            {
                Nodo* recorrido = inicio;
                while (recorrido->getEnlace() != NULL)
                {
                    //cout<<recorrido->getDato()<<"\t";
                    if (recorrido->getEnlace()->getEnlace() != NULL)
                        recorrido = recorrido->getEnlace();
                    else
                        break;
                }
                cout << endl;
                //recorrido->imprimir();
                recorrido->setEnlace(NULL);
                //recorrido->imprimir();
            }

        }

    }
    void EliminarElementoEnPosicion(int posicion)
    {
        int contador = 0;
        if (EstaVacia())
        {
            cout << "No hay elemento a eliminar" << endl;
        }
        else
        {
            if (posicion == 0)
            {
                EliminarElementoInicio();
            }
            else
            {
                Nodo* recorrido = inicio;

                while (recorrido->getEnlace() != NULL)
                {
                    if (contador == posicion - 1)
                    {
                        recorrido->setEnlace(recorrido->getEnlace()->getEnlace());
                        break;
                    }
                    else
                    {
                        contador++;
                        recorrido = recorrido->getEnlace();
                    }

                }
            }


        }
    }

    void EliminarElementoInicio()
    {
        if (EstaVacia())
        {
            cout << "No hay elemento a eliminar" << endl;
        }
        else
        {
            inicio = inicio->getEnlace();
        }
    }
    void Vaciar()
    {
        inicio = NULL;
    }
    bool EstaVacia()
    {
        if (inicio == NULL)
            return true;
        else
            return false;
    }
    //Implementar la eliminación de un nodo inicio
};

void MostrarMenu()
{
    cout << "1.- Ver el contenido de la lista enlazada" << endl;
    cout << "2.- Insertar un elemento en la pila" << endl;
    //cout << "3.- Insertar un elemento al final" << endl;
    cout << "3.- Buscar un elemento" << endl;
    cout << "4.- Quitar elemento de la Pila" << endl;
    //cout << "6.- Eliminar un elemento final" << endl;
    cout << "5.- Vaciar la lista" << endl;
    cout << "6.- Eliminar un elemento en la posición" << endl;
    cout << "0.- Salir" << endl;
}
Pila LeerDatosPilas()
{
    Pila insertarpila = Pila();
    int temporal;

    cout << "Ingrese el dato: " << endl;
    cin >> temporal;
    insertarpila.setIndice(temporal);
    return insertarpila;
}
int main()
{
    Lista pila = Lista();
    int posicion;
    int indice;
    Pila elemento = Pila();
    int opcion;
    do
    {
        MostrarMenu();
        cin >> opcion;
        switch (opcion)
        {
        case 0:
            cout << "Ingeniería de Sistemas, hasta luego." << endl;
            break;
        case 1:
            pila.Imprimir();
            break;
        case 2:
            pila.InsertarAlInicio(LeerDatosPilas());
            break;
        /*case 3:
            pila.InsertarAlFinal(LeerDatosPilas());
            break;
            */
        /*case 3:
            cout << "Digite el numero del dato: " << endl;
            cin >> indice;
            pila.Buscar(indice);
            break;
        case 4:
            cout<<"El elemento quitado es: ";
            pila.EliminarElementoInicio();
            break;
        /*case 6:
            pila.EliminarElementoFinal();
            break;
            */
            /*
        case 5:
            pila.Vaciar();
            break
        case 6:
            cout << "Digite posición: " << endl;
            cin >> posicion;
            pila.EliminarElementoEnPosicion(posicion);
            break;
        default:
            cout << "Opción no valida." << endl;
            break;
        }
    } while (opcion != 0);
}



#include <iostream>
using namespace std;
class Cola{
    int indice;
public:
    Cola()
    {
    indice = 0;
    }

    void setIndice(int valor)
    {
        indice = valor;
    }
    int getIndice()
    {
        return indice;
    }
};
class Nodo {
    //Atributos
    Cola dato; //char, float, string, objeto
    Nodo* enlace;//puntero..
public:
    //Constructor - inicializar los atributos
    Nodo(Cola dato)
    {
        this->dato = dato;
        enlace = NULL;//por que no apuntamos a ningun nodo
    }
    //getter and setter
    Cola getDato()
    {
        return dato;
    }
    void setDato(Cola dato)
    {
        this->dato = dato;
    }
    Nodo* getEnlace()
    {
        return this->enlace;
    }
    void setEnlace(Nodo* enlace)
    {
        this->enlace = enlace;
    }
    void imprimir()
    {
        cout << "/-------------------\\" << endl;
        cout << "|Dato: " << dato.getIndice() << endl;
        cout << "|-------------------" << endl;
        cout << "|Enlace: " << enlace << endl;
        cout << "\\------------------/" << endl;
    }
};

class Lista {
    Nodo* inicio;
public:
    Lista()
    {
        this->inicio = NULL;
    }
    void InsertarAlFinal(Cola dato)
    {
        Nodo* temp = new Nodo(dato);
        if (EstaVacia())//lista vacia
        {
            inicio = temp;
        }
        else
        {
            Nodo* recorrido = this->inicio;
            while (recorrido->getEnlace() != NULL)
            {
                recorrido = recorrido->getEnlace();
            }
            recorrido->setEnlace(temp);
        }
    }
    void InsertarAlInicio(Cola dato)
    {
        Nodo* temp = new Nodo(dato);
        if (EstaVacia())//lista vacia
        {
            inicio = temp;
        }
        else
        {
            Nodo* recorrido = this->inicio;
            this->inicio = temp;
            this->inicio->setEnlace(recorrido);
        }
    }
    void Imprimir()
    {
        int i = 1;
        Nodo* recorrido = inicio;
        cout << "Lista enlazada****************************" << endl;
        while (recorrido != NULL)
        {
            cout << "---> Nodo " << i++ << endl;
            recorrido->imprimir();
            recorrido = recorrido->getEnlace();
        }
        cout << "****************************" << endl << endl;
    }
    void Buscar(int indice)
    {
        bool encontrado = false;
        Nodo* recorrido = inicio;
        while (recorrido != NULL)
        {
            if (recorrido->getDato().getIndice() == indice)
            {
                cout << "Elemento encontrado en la dirección de memoría: " << recorrido << endl;
                encontrado = true;
                break;
            }
            else
            {
                recorrido = recorrido->getEnlace();
            }
        }
        if (encontrado == false)
        {
            cout << "El elemento buscado no fue encontrado." << endl;
        }
    }
    //------------------------------------
    //Implementar la eliminación de un nodo final
    void EliminarElementoFinal()
    {
        if (EstaVacia())
        {
            cout << "No hay elemento a eliminar" << endl;
        }
        else
        {
            if (inicio->getEnlace() == NULL)
            {
                inicio = NULL;
            }
            else
            {
                Nodo* recorrido = inicio;
                while (recorrido->getEnlace() != NULL)
                {
                    //cout<<recorrido->getDato()<<"\t";
                    if (recorrido->getEnlace()->getEnlace() != NULL)
                        recorrido = recorrido->getEnlace();
                    else
                        break;
                }
                cout << endl;
                //recorrido->imprimir();
                recorrido->setEnlace(NULL);
                //recorrido->imprimir();
            }

        }

    }
    void EliminarElementoEnPosicion(int posicion)
    {
        int contador = 0;
        if (EstaVacia())
        {
            cout << "No hay elemento a eliminar" << endl;
        }
        else
        {
            if (posicion == 0)
            {
                EliminarElementoInicio();
            }
            else
            {
                Nodo* recorrido = inicio;

                while (recorrido->getEnlace() != NULL)
                {
                    if (contador == posicion - 1)
                    {
                        recorrido->setEnlace(recorrido->getEnlace()->getEnlace());
                        break;
                    }
                    else
                    {
                        contador++;
                        recorrido = recorrido->getEnlace();
                    }

                }
            }


        }
    }

    void EliminarElementoInicio()
    {
        if (EstaVacia())
        {
            cout << "No hay elemento a eliminar" << endl;
        }
        else
        {
            inicio = inicio->getEnlace();
        }
    }
    void Vaciar()
    {
        inicio = NULL;
    }
    bool EstaVacia()
    {
        if (inicio == NULL)
            return true;
        else
            return false;
    }
    //Implementar la eliminación de un nodo inicio
};

void MostrarMenu()
{
    cout << "1.- Ver el contenido de la lista enlazada" << endl;
    cout << "2.- Insertar un elemento en la Cola" << endl;
    //cout << "3.- Insertar un elemento al final" << endl;
    cout << "3.- Buscar un elemento" << endl;
    cout << "4.- Quitar elemento de la Cola" << endl;
    //cout << "6.- Eliminar un elemento final" << endl;
    cout << "5.- Vaciar la lista" << endl;
    cout << "6.- Eliminar un elemento en la posición" << endl;
    cout << "0.- Salir" << endl;
}
Cola LeerDatosColas()
{
    Cola insertarcola = Cola();
    int temporal;

    cout << "Ingrese el dato: " << endl;
    cin >> temporal;
    insertarcola.setIndice(temporal);
    return insertarcola;
}
int main()
{
    Lista cola = Lista();
    int posicion;
    int indice;
    Cola elemento = Cola();
    int opcion;
    do
    {
        MostrarMenu();
        cin >> opcion;
        switch (opcion)
        {
        case 0:
            cout << "Ingeniería de Sistemas, hasta luego." << endl;
            break;
        case 1:
            cola.Imprimir();
            break;
        case 2:
            cola.InsertarAlFinal(LeerDatosColas());
            break;
        /*case 3:
            pila.InsertarAlFinal(LeerDatosPilas());
            break;
            */
        case 3:
            cout << "Digite el numero del dato: " << endl;
            cin >> indice;
            cola.Buscar(indice);
            break;
        case 4:
            cout<<"El elemento quitado es: "<< endl;
            cola.EliminarElementoInicio();
            break;
        /*case 6:
            pila.EliminarElementoFinal();
            break;
            */
        case 5:
            cola.Vaciar();
            break;
        case 6:
            cout << "Digite posición: " << endl;
            cin >> posicion;
            cola.EliminarElementoEnPosicion(posicion);
            break;
        default:
            cout << "Opción no valida." << endl;
            break;
        }
    } while (opcion != 0);
}